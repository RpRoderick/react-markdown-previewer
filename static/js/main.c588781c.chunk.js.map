{"version":3,"sources":["components/structural/buttonArea/ButtonArea.module.scss","components/structural/textArea/TextArea.module.scss","components/structural/previewArea/PreviewArea.module.scss","components/structural/home/Home.module.scss","components/dynamic/error/Error.module.scss","components/structural/buttonArea/ButtonArea.jsx","components/structural/previewArea/PreviewArea.jsx","components/structural/textArea/TextArea.jsx","components/structural/markdownEditor/MarkdownEditor.jsx","components/structural/home/Home.jsx","components/dynamic/error/Error.jsx","routes/app/App.jsx","serviceWorker.js","index.jsx","components/structural/markdownEditor/MarkdownEditor.module.scss"],"names":["module","exports","ButtonArea","props","className","styles","button_container","type","button","onClick","clearMarkdown","resetMarkdown","PreviewArea","preview_area_container","preview","dangerouslySetInnerHTML","__html","marked","markdown","TextArea","text_area_container","textarea","htmlFor","id","editor","value","onChange","e","updateMarkdown","target","placeholder","MarkdownEditor","bind","state","this","setState","markdown_editor_button_area","markdown_editor_text_area","markdown_editor_preview_area","React","Component","Home","home","Error","error","App","exact","path","component","default","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,iBAAmB,qCAAqC,OAAS,6B,mBCAnFD,EAAOC,QAAU,CAAC,oBAAsB,sCAAsC,SAAW,2BAA2B,OAAS,2B,mBCA7HD,EAAOC,QAAU,CAAC,uBAAyB,4CAA4C,QAAU,+B,mBCAjGD,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,MAAQ,uB,6OCqBXC,MAlBf,SAAoBC,GAClB,OACE,yBAAKC,UAAWC,IAAOC,kBACrB,4BAAQC,KAAK,SAASH,UAAWC,IAAOG,OAAQC,QAAS,kBAAMN,EAAMO,kBAArE,eAGA,4BAAQH,KAAK,SAASH,UAAWC,IAAOG,OAAQC,QAAS,kBAAMN,EAAMQ,kBAArE,iB,kCCWSC,MAhBf,SAAqBT,GACjB,OACE,yBAAKC,UAAWC,IAAOQ,wBACrB,yBAAKT,UAAWC,IAAOS,QACrBC,wBAAyB,CACvBC,OAAQC,IAAOd,EAAMe,e,iBCelBC,MArBf,SAAkBhB,GAChB,OACE,yBAAKC,UAAWC,IAAOe,qBACrB,2BAAOhB,UAAWC,IAAOgB,SAAUC,QAAQ,YAA3C,wBACA,8BACEC,GAAG,WACHnB,UAAWC,IAAOmB,OAClBC,MAAOtB,EAAMe,SACbQ,SAAU,SAACC,GACTxB,EAAMyB,eAAeD,EAAEE,OAAOJ,SAC/BtB,EAAMe,YCRTY,EAAW,q3BAgGFC,E,kDApDb,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IACDyB,eAAiB,EAAKA,eAAeI,KAApB,gBACtB,EAAKtB,cAAgB,EAAKA,cAAcsB,KAAnB,gBACrB,EAAKrB,cAAgB,EAAKA,cAAcqB,KAAnB,gBACrB,EAAKC,MAAQ,CACXf,SAAUY,GANK,E,2DAUJZ,GACbgB,KAAKC,SAAS,CACZjB,e,sCAKFgB,KAAKC,SAAS,CACZjB,SAAU,O,sCAKZgB,KAAKC,SAAS,CACZjB,SAAUY,M,+BAKZ,IAAMZ,EAAWgB,KAAKD,MAAMf,SAC5B,OACE,oCACE,yBAAKd,UAAWC,IAAO+B,6BACrB,kBAAC,EAAD,CACE1B,cAAewB,KAAKxB,cACpBC,cAAeuB,KAAKvB,iBAExB,yBAAKP,UAAWC,IAAOgC,2BACrB,kBAAC,EAAD,CACET,eAAgBM,KAAKN,eACrBV,SAAUA,KAEd,yBAAKd,UAAWC,IAAOiC,8BACrB,kBAAC,EAAD,CACEpB,SAAUA,U,GA7COqB,IAAMC,WCrCpBC,MARf,WACE,OACE,yBAAKrC,UAAWC,IAAOqC,MACrB,kBAAC,EAAD,Q,iBCISC,MARf,WACE,OACE,yBAAKvC,UAAWC,IAAOuC,OAAvB,iE,MCcWC,MAbf,WACE,OACE,kBAAC,IAAD,KACE,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOQ,SAAO,EAACD,UAAWL,QCEhBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLuB,QAAQvB,MAAMA,EAAMwB,a,kBE1I5BpE,EAAOC,QAAU,CAAC,4BAA8B,oDAAoD,6BAA+B,qDAAqD,0BAA4B,qD","file":"static/js/main.c588781c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_container\":\"ButtonArea_button_container__1gv0y\",\"button\":\"ButtonArea_button__2rGr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_area_container\":\"TextArea_text_area_container__2XiTv\",\"textarea\":\"TextArea_textarea__3y9iG\",\"editor\":\"TextArea_editor__3PNOC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preview_area_container\":\"PreviewArea_preview_area_container__1sJn9\",\"preview\":\"PreviewArea_preview__38snV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__1UecR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error_error__PyqvZ\"};","import React from 'react';\nimport styles from 'components/structural/buttonArea/ButtonArea.module.scss';\nimport { PropTypes } from 'prop-types';\n\nfunction ButtonArea(props) {\n  return (\n    <div className={styles.button_container}>\n      <button type=\"button\" className={styles.button} onClick={() => props.clearMarkdown()}>\n        Clear State\n      </button>\n      <button type=\"button\" className={styles.button} onClick={() => props.resetMarkdown()}>\n        Reset State\n      </button>\n    </div>\n  );\n}\n\nButtonArea.propTypes = { \n  clearMarkdown: PropTypes.func,\n  resetMarkdown: PropTypes.func\n}\n\nexport default ButtonArea;","import React from 'react';\nimport styles from 'components/structural/previewArea/PreviewArea.module.scss';\nimport marked from 'marked';\nimport { PropTypes } from 'prop-types';\n\nfunction PreviewArea(props) {\n    return (\n      <div className={styles.preview_area_container}>\n        <div className={styles.preview}\n          dangerouslySetInnerHTML={{\n            __html: marked(props.markdown)\n          }}>\n        </div>\n      </div>\n    );\n}\n\nPreviewArea.propTypes = { \n  markdown: PropTypes.string\n}\n\nexport default PreviewArea;\n","import React from 'react';\nimport styles from 'components/structural/textArea/TextArea.module.scss';\nimport { PropTypes } from 'prop-types';\n\nfunction TextArea(props) {\n  return (\n    <div className={styles.text_area_container}>\n      <label className={styles.textarea} htmlFor=\"textarea\">Enter Markdown here:</label>\n      <textarea\n        id=\"textarea\"\n        className={styles.editor}\n        value={props.markdown}\n        onChange={(e) => {\n          props.updateMarkdown(e.target.value);}}>\n        {props.markdown}\n      </textarea>\n    </div>\n  );\n}\n\nTextArea.propTypes = { \n  markdown: PropTypes.string,\n  updateMarkdown: PropTypes.func\n}\n\nexport default TextArea;","import React from 'react';\nimport styles from 'components/structural/markdownEditor/MarkdownEditor.module.scss';\nimport ButtonArea from 'components/structural/buttonArea/ButtonArea';\nimport PreviewArea from 'components/structural/previewArea/PreviewArea';\nimport TextArea from 'components/structural/textArea/TextArea';\n\nconst placeholder = \n`# <u>React Markdown Previewer</u>\n\n# **<span style=\"color:blue\">Basics:</span>**\n\n**Bold text**\n\n*Italicized text*\n\n**_Bold and Italicized text_**\n\n> Block Quote\n\n<u>underlined (sort of - it's actually just html)</u>\n\n~~crossed out~~\n\nSingle line code: \\`<div></div>\\`\n\nMulti-line code:\n\\`\\`\\`\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n1. Numbered Lists\n2. are easy\n3. to make\n\n- So are\n- unordered\n- lists\n\n# H1 - Heading #1\n## H2 - Heading #2\n### H3 - Heading #3\n\n[Links are easy too](https://github.com/RpRoderick) Or html to open in a new tab <a href=\"https://github.com/RpRoderick\" target=\"_blank\">Links are easy too</a>\n\nFor more Markdown tips, check out this <a href=\"https://www.markdownguide.org/cheat-sheet/\" target=\"_blank\">Cheat Sheet</a>\n`\nclass MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateMarkdown = this.updateMarkdown.bind(this);\n    this.clearMarkdown = this.clearMarkdown.bind(this);\n    this.resetMarkdown = this.resetMarkdown.bind(this);\n    this.state = {\n      markdown: placeholder\n    };\n  }\n  \n  updateMarkdown(markdown) {\n    this.setState({ \n      markdown \n    });\n  }\n  \n  clearMarkdown() {\n    this.setState({ \n      markdown: \"\" \n    });\n  }\n  \n    resetMarkdown() {\n    this.setState({ \n      markdown: placeholder \n    });\n  }\n  \n    render() {\n    const markdown = this.state.markdown;\n    return (\n      <>\n        <div className={styles.markdown_editor_button_area}>\n          <ButtonArea \n            clearMarkdown={this.clearMarkdown}\n            resetMarkdown={this.resetMarkdown} />\n        </div>\n        <div className={styles.markdown_editor_text_area}>\n          <TextArea \n            updateMarkdown={this.updateMarkdown}\n            markdown={markdown} />\n        </div>\n        <div className={styles.markdown_editor_preview_area}>\n          <PreviewArea \n            markdown={markdown}  \n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default MarkdownEditor;\n","import React from 'react';\nimport styles from 'components/structural/home/Home.module.scss';\nimport MarkdownEditor from 'components/structural/markdownEditor/MarkdownEditor';\n\nfunction Home() {\n  return (\n    <div className={styles.home}>\n      <MarkdownEditor />\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport styles from 'components/dynamic/error/Error.module.scss';\n\nfunction Error() {\n  return (\n    <div className={styles.error}>\n      Error! Really though.... You are seeing the error component!\n    </div>\n  );\n}\n\nexport default Error;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from 'components/structural/home/Home';\nimport Error from 'components/dynamic/error/Error';\nimport 'styles/global/App.scss';\n\nfunction App() {\n  return (\n    <Router>\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route default component={Error} />\n        </Switch>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'routes/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"markdown_editor_button_area\":\"MarkdownEditor_markdown_editor_button_area__1J_1E\",\"markdown_editor_preview_area\":\"MarkdownEditor_markdown_editor_preview_area__2XKuI\",\"markdown_editor_text_area\":\"MarkdownEditor_markdown_editor_text_area__2oBmn\"};"],"sourceRoot":""}